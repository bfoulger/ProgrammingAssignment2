q()
pwd
install.packages("KernSmooth")
library(KernSmooth)
getwd
getwd()
q()
q()
setwd("C:/Users/rdfoulge/CourseraR/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function () x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
matrix(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
a=rep(0:1,5)
b=rep(0,10)
c=rep(1,10)
dataset=matrix(cbind(a,b,c),nrow=10,ncol=3)
makeCacheMatrix(dataset)
solve(dataset)
a=rep(0:1,5)
b=rep(0,10)
c=rep(1,10)
dataset=matrix(cbind(a,b,c),nrow=3,ncol=3)
solve(dataset)
dataset
a=c(3, 5, 8)
b=c(4, 5, 7)
c=c(2, 2, 2)
dataset=matrix(cbind(a,b,c),nrow=3,ncol=3)
dataset
solve(dataset)
makeCachematrix
makeCacheMatrix(dataset)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(3, 5, 7, 2, 7, 3, 5, 9, 1, 5)
makeVector(x)
cacheMean(x)
cachemean(x)
mean
mean(x)
b <- (3:50)
makeVector(b)
cachemean(b)
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function () x
setsolve <- function(solve) s <<- solve
getsolve <- function() s
matrix(set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## cacheSolve(x) computes the inverse of the matrix created by makeCacheMatrix(x).
##If the inverse has already been calculated (without the matrix x changing),
##then cacheSolve() should retriece the inverse from cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
s <- x$solve()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <-x$get()
s <- solve(data, ...)
x$setsolve(s)
s
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
makeCacheMatrix <- function (x = matrix()) {
i <- NULL
list( getMatrix = function () x
, getInverse = function () i
, setInverse = function (j) i <<- j
, setMatrix = function (y) {
x <<- y
i <<- NULL
}
)
}
## The `cacheSolve` function takes a cacheable matrix as an input and retrieves
## its cached inverse. If the inverse is not `NULL` (i.e. it had been previously
## calculated) then it returns the cached inverse. Otherwise it gets the actual
## matrix from the cacheable matrix wrapper, calculates its inverse (passing
## additional parameters silently) and caches the result before returning it.
cacheSolve <- function (x, ...) {
i <- x$getInverse()
if (!is.null(i)) return(i);
data <- x$getMatrix()
i <- solve(data, ...)
x$setInverse(i)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()         # Returns original matrix
amatrix$get()
amatrix
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$getInverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$getMatrix()
## The `makeCacheMatrix` function creates a cacheable matrix. The `cacheSolve`
## function takes a cacheable matrix and returns its inverse. If the inverse was
## previously calculated then it returns the result from the cache. Otherwise it
## calculates the inverse, stores it in the cache and returns it.
## The `makeCacheMatrix` takes a single optional argument - the input matrix to
## be cached. Initially the inverse of the matrix is set to `NULL`. The output
## is a list of 4 functions - two getters and two setters. The names are self
## explanatory. The `setMatrix` function, in addition to setting the matrix,
## also sets the inverse to `NULL`. This tells the `cacheSolve` function to
## recalculate the inverse of the matrix.
makeCacheMatrix <- function (x = matrix()) {
i <- NULL
list( getMatrix = function () x
, getInverse = function () i
, setInverse = function (j) i <<- j
, setMatrix = function (y) {
x <<- y
i <<- NULL
}
)
}
## The `cacheSolve` function takes a cacheable matrix as an input and retrieves
## its cached inverse. If the inverse is not `NULL` (i.e. it had been previously
## calculated) then it returns the cached inverse. Otherwise it gets the actual
## matrix from the cacheable matrix wrapper, calculates its inverse (passing
## additional parameters silently) and caches the result before returning it.
cacheSolve <- function (x, ...) {
i <- x$getInverse()
if (!is.null(i)) return(i);
data <- x$getMatrix()
i <- solve(data, ...)
x$setInverse(i)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getMatrix()         # Returns original matrix
cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
amatrix$getInverse()  # Returns matrix inverse
cacheSolve(amatrix)
amatrix$setMatrix(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$getMatrix()
amatrix$getinverse()
amatrix$getInverse()
makeCacheMatrix <- function (x = matrix()) {
b <- NULL
list( getMatrix = function () x
, getInverse = function () b
, setInverse = function (c) b <<- c
, setMatrix = function (y) {
x <<- y
b <<- NULL
}
)
}
## The `cacheSolve` function takes a cacheable matrix as an input and retrieves
## its cached inverse. If the inverse is not `NULL` (i.e. it had been previously
## calculated) then it returns the cached inverse. Otherwise it gets the actual
## matrix from the cacheable matrix wrapper, calculates its inverse (passing
## additional parameters silently) and caches the result before returning it.
cacheSolve <- function (x, ...) {
b <- x$getInverse()
if (!is.null(b)) return(b);
data <- x$getMatrix()
b <- solve(data, ...)
x$setInverse(b)
i
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getMatrix()         # Returns original matrix
cacheSolve(amatrix)
## The `makeCacheMatrix` function creates a cacheable matrix. The `cacheSolve`
## function takes a cacheable matrix and returns its inverse. If the inverse was
## previously calculated then it returns the result from the cache. Otherwise it
## calculates the inverse, stores it in the cache and returns it.
## The `makeCacheMatrix` takes a single optional argument - the input matrix to
## be cached. Initially the inverse of the matrix is set to `NULL`. The output
## is a list of 4 functions - two getters and two setters. The names are self
## explanatory. The `setMatrix` function, in addition to setting the matrix,
## also sets the inverse to `NULL`. This tells the `cacheSolve` function to
## recalculate the inverse of the matrix.
makeCacheMatrix <- function (x = matrix()) {
b <- NULL
list( getMatrix = function () x
, getInverse = function () b
, setInverse = function (c) b <<- c
, setMatrix = function (y) {
x <<- y
b <<- NULL
}
)
}
## The `cacheSolve` function takes a cacheable matrix as an input and retrieves
## its cached inverse. If the inverse is not `NULL` (i.e. it had been previously
## calculated) then it returns the cached inverse. Otherwise it gets the actual
## matrix from the cacheable matrix wrapper, calculates its inverse (passing
## additional parameters silently) and caches the result before returning it.
cacheSolve <- function (x, ...) {
b <- x$getInverse()
if (!is.null(b)) return(b);
data <- x$getMatrix()
b <- solve(data, ...)
x$setInverse(b)
b
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$getMatrix()
cacheSolve(amatrix)
amatrix$getInverse()
cacheSolve(amatrix)
amatrix$setMatrix(matrix(c(0,5,99,66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$getMatrix()
amatrix$getInverse()
